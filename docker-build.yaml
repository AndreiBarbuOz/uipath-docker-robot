Description: Deploys the required infrastructure needed to create the docker-build instance
Parameters:
  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnetCIDR:
    Description: The IP range (CIDR notation) for the public subnet
    Type: String
    Default: 10.192.10.0/24
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: c5.xlarge
    AllowedValues:
      - c5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ImageRepoStack:
    Description: The Stack of the docker image repository where the image should be pushed
    Type: String
    Default: docker-image-repo
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-022ecd08d23a9bf9c

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  HttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "http-ingress-sg"
      GroupDescription: "Basic security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: "RDP protocol"
          IpProtocol: "tcp"
          FromPort: 3389
          ToPort: 3389
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - Description: "Allow all outbound traffic"
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
  DockerBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AllowEcrAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                Resource: 
                  Fn::ImportValue: 
                    !Sub "${ImageRepoStack}:ecr-arn"
        - PolicyName: "GetToken"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
        - PolicyName: "ListCfnExports"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:ListExports"
                Resource: "*"

  DockerBuildProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DockerBuildRole

  DockerBuildInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          BuildDocker:
            - build
        build:
          sources:
            c:\\temp: https://github.com/AndreiBarbuOz/dockerized-robot/tarball/master
          files:
            c:\\temp\\file_name.txt:
              content: 
                Fn::ImportValue: 
                  !Sub "${ImageRepoStack}:ecr-uri"
          commands:
            0_build:
              cwd: c:\\temp
              command: powershell -Command "c:\\temp\\build-image.ps1" -file_name file_name.txt
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - HVM64
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref "Eth0"
          DeviceIndex: "0"
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          <script>
          mkdir C:\temp
          cfn-init.exe -v --stack ${AWS::StackId} --resource DockerBuildInstance --region ${AWS::Region} --configsets BuildDocker
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource DockerBuildInstance --region ${AWS::Region}
          </script>
      Tags:
        - Key: Name
          Value: docker-build
      IamInstanceProfile: !Ref DockerBuildProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT1H"

  Eth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      SourceDestCheck: "true"
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: Interface 0
        - Key: Interface
          Value: eth0
      GroupSet:
        - !Ref HttpSecurityGroup

